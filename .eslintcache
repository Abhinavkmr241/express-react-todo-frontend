[{"/home/abhinav/Desktop/React/ToDoFrontend/src/index.js":"1","/home/abhinav/Desktop/React/ToDoFrontend/src/App.js":"2","/home/abhinav/Desktop/React/ToDoFrontend/src/serviceWorker.js":"3","/home/abhinav/Desktop/React/ToDoFrontend/src/components/ToDo.jsx":"4","/home/abhinav/Desktop/React/ToDoFrontend/src/http/http-calls.js":"5","/home/abhinav/Desktop/React/ToDoFrontend/src/components/ToDoList.jsx":"6","/home/abhinav/Desktop/React/ToDoFrontend/src/config.js":"7","/home/abhinav/Desktop/React/ToDoFrontend/src/http/http-service.js":"8","/home/abhinav/Desktop/React/ToDoFrontend/src/components/ListElement.jsx":"9"},{"size":503,"mtime":1602861127000,"results":"10","hashOfConfig":"11"},{"size":194,"mtime":1609229114683,"results":"12","hashOfConfig":"11"},{"size":5086,"mtime":1602861127000,"results":"13","hashOfConfig":"11"},{"size":3079,"mtime":1609307139432,"results":"14","hashOfConfig":"11"},{"size":1641,"mtime":1609307373335,"results":"15","hashOfConfig":"11"},{"size":2276,"mtime":1609306041405,"results":"16","hashOfConfig":"11"},{"size":94,"mtime":1609252132800,"results":"17","hashOfConfig":"11"},{"size":3885,"mtime":1609307340170,"results":"18","hashOfConfig":"11"},{"size":2166,"mtime":1609307031350,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1etsz9m",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/abhinav/Desktop/React/ToDoFrontend/src/index.js",[],["41","42"],"/home/abhinav/Desktop/React/ToDoFrontend/src/App.js",[],"/home/abhinav/Desktop/React/ToDoFrontend/src/serviceWorker.js",[],"/home/abhinav/Desktop/React/ToDoFrontend/src/components/ToDo.jsx",["43","44"],"import React, { Component } from 'react';\r\nimport './ToDo.css';\r\nimport ToDoList from './ToDoList';\r\nimport { todoList, addToDo, updateToDo } from '../http/http-calls';\r\n\r\nclass ToDo extends Component {\r\n\r\n    state = {\r\n        message: '',\r\n        toDoList: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getToDoList();\r\n    }\r\n\r\n    getToDoList = () => {\r\n        todoList().then((resp) => {\r\n            this.setState({\r\n                toDoList: resp.todos\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    handleInput = (value) => {\r\n        if (!!value.trim().length) {\r\n            this.setState({\r\n                message: value\r\n            });\r\n        }\r\n    }\r\n\r\n    addITem = (e) => {\r\n        e.preventDefault();\r\n        let todoData = {\r\n            message: this.state.message,\r\n            isActive: true\r\n        };\r\n        addToDo(todoData).then((resp) => {\r\n            console.log(resp);\r\n            this.setState({ message: '' });\r\n            this.getToDoList();\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    markAll = (checked) => {\r\n        if (checked) {\r\n            this.state.toDoList.map((todo) => {\r\n                let todoData = {\r\n                    isActive: false\r\n                };\r\n                updateToDo(todoData, todo._id).then((resp) => {\r\n                    console.log(resp);\r\n                    this.getToDoList();\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                });\r\n            });\r\n        } else {\r\n            this.state.toDoList.map((todo) => {\r\n                let todoData = {\r\n                    isActive: true\r\n                };\r\n                updateToDo(todoData, todo._id).then((resp) => {\r\n                    console.log(resp);\r\n                    this.getToDoList();\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"background\">\r\n                <h1><strong>To Do</strong></h1>\r\n                <div className=\"todoBody\">\r\n                    <form onSubmit= {this.addITem}>\r\n                        <input type=\"text\" placeholder=\"Enter what to do...?!\"\r\n                            className=\"inputText\"\r\n                            value={this.state.message}\r\n                            onChange= {(e) => this.handleInput(e.target.value)} \r\n                        />\r\n                        <button type=\"submit\" className=\"addButton\" ><strong>Add</strong></button>\r\n                    </form>\r\n                    <input type=\"checkbox\" id=\"markAll\" onClick={(e) => this.markAll(e.target.checked)} />\r\n                    <label><strong>Mark All</strong></label>\r\n                    <ToDoList todoList={this.state.toDoList}\r\n                        reload={() => this.getToDoList()}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo;\r\n","/home/abhinav/Desktop/React/ToDoFrontend/src/http/http-calls.js",[],"/home/abhinav/Desktop/React/ToDoFrontend/src/components/ToDoList.jsx",["45","46"],"import React, { useState } from 'react';\r\nimport './ToDoList.css';\r\nimport ListElement from './ListElement';\r\n\r\nexport const ToDoList = ({ todoList, reload }) => {\r\n\r\n    const [ selectedType, setSelectedType ] = useState(\"All\"); \r\n\r\n    const getListElement = (type) => {\r\n        if (type === \"Active\") {\r\n            return renderList(\"Active\");\r\n        } else if (type === \"Completed\") {\r\n            return renderList(\"Completed\");\r\n        } else {\r\n            return renderList(\"All\");\r\n        }\r\n    }\r\n\r\n    const renderList = (type) => {\r\n        var listItems = '';\r\n        switch (type) {\r\n            case \"Active\": {\r\n                listItems = todoList.map((todo) => {\r\n                    if (todo.isActive) {\r\n                        return (\r\n                            <ListElement item={todo} key={todo._id} reload={reload}/>\r\n                        )\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case \"Completed\": {\r\n                listItems = todoList.map((todo) => {\r\n                    if (!todo.isActive) {\r\n                        return (\r\n                            <ListElement item={todo} key={todo._id} reload={reload}/>\r\n                        )\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            default: {\r\n                listItems = todoList.map((todo) => {\r\n                    return (\r\n                        <ListElement item={todo} key={todo._id} reload={reload}/>\r\n                    )\r\n                });\r\n            }\r\n        }\r\n        return listItems;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"functionBox\">\r\n                <div>\r\n                    <button onClick={() => setSelectedType(\"All\")}>All</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => setSelectedType(\"Active\")}>Active</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => setSelectedType(\"Completed\")}>Completed</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"listBox\">\r\n                {getListElement(selectedType)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;\r\n","/home/abhinav/Desktop/React/ToDoFrontend/src/config.js",[],"/home/abhinav/Desktop/React/ToDoFrontend/src/http/http-service.js",[],"/home/abhinav/Desktop/React/ToDoFrontend/src/components/ListElement.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":52,"column":44,"nodeType":"53","messageId":"54","endLine":52,"endColumn":46},{"ruleId":"51","severity":1,"message":"52","line":64,"column":44,"nodeType":"53","messageId":"54","endLine":64,"endColumn":46},{"ruleId":"51","severity":1,"message":"55","line":23,"column":49,"nodeType":"53","messageId":"56","endLine":23,"endColumn":51},{"ruleId":"51","severity":1,"message":"55","line":33,"column":49,"nodeType":"53","messageId":"56","endLine":33,"endColumn":51},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation"]